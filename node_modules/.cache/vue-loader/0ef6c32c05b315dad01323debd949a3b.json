{"remainingRequest":"/Users/yoon/jz-video/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yoon/jz-video/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yoon/jz-video/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yoon/jz-video/src/components/vue-cropper/vue-cropper.vue?vue&type=template&id=32ccbd9d&","dependencies":[{"path":"/Users/yoon/jz-video/src/components/vue-cropper/vue-cropper.vue","mtime":1582719600788},{"path":"/Users/yoon/jz-video/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yoon/jz-video/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yoon/jz-video/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yoon/jz-video/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}